print("事後檢定結果：")
print(treatment_test)
print(Day_test)
print(Day_test)
plot(treatment_test)
print(Day_test)
plot(Day_test)
# 安裝所需套件（如未安裝）
if (!require("agricolae")) install.packages("agricolae")
if (!require("tidyverse")) install.packages("tidyverse")
# 載入套件
library(agricolae)
library(tidyverse)
# 匯入數據
file_path <- "睡眠時間.csv"
data <- read.csv(file_path, stringsAsFactors = FALSE)
# 確保日期欄位的名稱正確並轉換為日期格式
colnames(data)[1] <- "Date"  # 確保第一欄是日期欄位
data$Date <- as.Date(data$Date, format = "%Y/%m/%d")  # 根據日期格式進行轉換
# 增加星期欄位
data$Day <- weekdays(data$Date)
# 數據長格式化，深眠與淺眠作為處理（Treatment）
data_long <- data %>%
pivot_longer(cols = c("深眠.分鐘.", "淺眠.分鐘."),
names_to = "Treatment",
values_to = "Response") %>%
mutate(Treatment = ifelse(Treatment == "深眠.分鐘.", "DeepSleep", "LightSleep"))
# 將 Day 轉為因子
data_long$Day <- factor(data_long$Day)
# 隨機完全區組設計（RCBD）
rcbd_model <- aov(Response ~ Treatment + Day, data = data_long)
# 輸出 ANOVA 表
anova_table <- summary(rcbd_model)
print("ANOVA 表：")
print(anova_table)
# 事後檢定（Tukey HSD）
treatment_test <- HSD.test(rcbd_model, "Treatment", group = TRUE, console = TRUE)
Day_test <- HSD.test(rcbd_model, "Day", group = TRUE, console = TRUE)
# 輸出事後檢定結果
print("事後檢定結果：")
print(treatment_test)
plot(treatment_test)
print(Day_test)
plot(Day_test)
plot(treatment_test)
# 事後檢定（Tukey HSD）
treatment_test <- HSD.test(rcbd_model, "Treatment", group = TRUE, console = TRUE)
Day_test <- HSD.test(rcbd_model, "Day", group = TRUE, console = TRUE)
anova_table <- summary(rcbd_model)
print("ANOVA 表：")
print(anova_table)
print("事後檢定結果：")
print(treatment_test)
plot(treatment_test)
print(Day_test)
plot(Day_test)
print(treatment_test)
print(treatment_test)
print(Day_test)
getwd()
setwd("C:/Users/huann/Downloads/E10728")
# 計算敘述統計的函式
calc_stats <- function(data) {
stats <- data.frame(
mean = sapply(data, mean, na.rm = TRUE),
sd = sapply(data, sd, na.rm = TRUE),
min = sapply(data, min, na.rm = TRUE),
max = sapply(data, max, na.rm = TRUE)
)
return(stats)
}
# 讀取 data1 和 data2 資料集
data1 <- read.csv("data_1.csv")
data2 <- read.csv("data_2.csv")
View(data1)
View(data1)
data2 <- read.csv("data_2.csv",encoding = "CP932")
data2 <- read.csv("data_2.csv",encoding = "CP950")
# 安裝並載入 readr 套件
if (!require(readr)) install.packages("readr")
library(readr)
# 嘗試檢測編碼
encoding_info <- guess_encoding("data_2.CSV")
print(encoding_info)
data2 <- read.csv("data_2.csv",encoding = "Big5")
# 讀取 Big5 編碼的 CSV 檔案
data2 <- read.csv("data_2.CSV", fileEncoding = "Big5", stringsAsFactors = FALSE)
# 計算敘述統計的函式
calc_stats <- function(data) {
stats <- data.frame(
mean = sapply(data, mean, na.rm = TRUE),
sd = sapply(data, sd, na.rm = TRUE),
min = sapply(data, min, na.rm = TRUE),
max = sapply(data, max, na.rm = TRUE)
)
return(stats)
}
# 讀取 data1 和 data2 資料集
data1 <- read.csv("data_1.csv")
# 讀取 Big5 編碼的 CSV 檔案
data2 <- read.csv("data_2.CSV", fileEncoding = "Big5", stringsAsFactors = FALSE)
# 選取僅包含數值型變數的資料
numeric_data1 <- data1[sapply(data1, is.numeric)]
numeric_data2 <- data2[sapply(data2, is.numeric)]
# 計算敘述統計
stats_data1 <- calc_stats(numeric_data1)
stats_data2 <- calc_stats(numeric_data2)
# 合併敘述統計進行比較
comparison <- cbind(stats_data1, stats_data2)
# 計算敘述統計的函式
calc_stats <- function(data) {
stats <- data.frame(
mean = sapply(data, mean, na.rm = TRUE),
sd = sapply(data, sd, na.rm = TRUE),
min = sapply(data, min, na.rm = TRUE),
max = sapply(data, max, na.rm = TRUE)
)
return(stats)
}
# 讀取 data1 和 data2 資料集
data1 <- read.csv("data_1.csv")
# 讀取 Big5 編碼的 CSV 檔案
data2 <- read.csv("data_2.CSV", fileEncoding = "Big5", stringsAsFactors = FALSE)
# 選取僅包含數值型變數的資料
numeric_data1 <- data1[sapply(data1, is.numeric)]
numeric_data2 <- data2[sapply(data2, is.numeric)]
common_vars <- intersect(names(data1), names(data2))
numeric_data1 <- data1[common_vars]
numeric_data2 <- data2[common_vars]
# 重新計算敘述統計
stats_data1 <- calc_stats(numeric_data1)
stats_data2 <- calc_stats(numeric_data2)
# 合併敘述統計
comparison <- cbind(stats_data1, stats_data2)
print(comparison)
# 查看結果
print(comparison)
# 計算敘述統計的函式
calc_stats <- function(data) {
stats <- data.frame(
mean = sapply(data, mean, na.rm = TRUE),
sd = sapply(data, sd, na.rm = TRUE),
min = sapply(data, min, na.rm = TRUE),
max = sapply(data, max, na.rm = TRUE)
)
return(stats)
}
# 讀取 data1 和 data2 資料集
data1 <- read.csv("data_1.csv")
# 讀取 Big5 編碼的 CSV 檔案
data2 <- read.csv("data_2.CSV", fileEncoding = "Big5", stringsAsFactors = FALSE)
# 選取僅包含數值型變數的資料
numeric_data1 <- data1[sapply(data1, is.numeric)]
numeric_data2 <- data2[sapply(data2, is.numeric)]
common_vars <- intersect(names(data1), names(data2))
numeric_data1 <- data1[common_vars]
numeric_data2 <- data2[common_vars]
# 重新計算敘述統計
stats_data1 <- calc_stats(numeric_data1)
stats_data2 <- calc_stats(numeric_data2)
# 合併敘述統計
comparison <- cbind(stats_data1, stats_data2)
print(comparison)
# 查看結果
print(comparison)
library(ggplot2)
# 假設已合併 data1 和 data2 的資料
merged_data <- rbind(
transform(data1, source = "data1"),
transform(data2, source = "data2")
)
library(ggplot2)
# 假設已合併 data1 和 data2 的資料
merged_data <- rbind(
transform(data1, source = "data1"),
transform(data2, source = "data2")
)
# 計算敘述統計的函式
calc_stats <- function(data) {
stats <- data.frame(
mean = sapply(data, mean, na.rm = TRUE),
sd = sapply(data, sd, na.rm = TRUE),
min = sapply(data, min, na.rm = TRUE),
max = sapply(data, max, na.rm = TRUE)
)
return(stats)
}
# 讀取 data1 和 data2 資料集
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
data2 <- read.csv("data_2.CSV", fileEncoding = "Big5", stringsAsFactors = FALSE)
# 確認共同的變數
common_vars <- intersect(names(data1), names(data2))
# 選取數值型變數且僅保留共同變數
numeric_data1 <- data1[common_vars][sapply(data1[common_vars], is.numeric)]
numeric_data2 <- data2[common_vars][sapply(data2[common_vars], is.numeric)]
# 計算敘述統計
stats_data1 <- calc_stats(numeric_data1)
stats_data2 <- calc_stats(numeric_data2)
# 合併敘述統計
comparison <- cbind(stats_data1, stats_data2)
# 繪製疊加柱狀圖
ggplot(merged_data, aes(x = source, fill = as.factor(v1))) +
geom_bar(position = "fill") +
labs(title = "同意程度分佈", x = "資料集", y = "百分比", fill = "同意程度") +
theme_minimal()
# 計算敘述統計的函式
calc_stats <- function(data) {
stats <- data.frame(
mean = sapply(data, mean, na.rm = TRUE),
sd = sapply(data, sd, na.rm = TRUE),
min = sapply(data, min, na.rm = TRUE),
max = sapply(data, max, na.rm = TRUE)
)
return(stats)
}
# 讀取 data1 和 data2 資料集
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
data2 <- read.csv("data_2.CSV", fileEncoding = "Big5", stringsAsFactors = FALSE)
# 找出共同變數
common_vars <- intersect(names(numeric_data1), names(numeric_data2))
# 選取共同變數並重新計算敘述統計
numeric_data1 <- numeric_data1[common_vars]
numeric_data2 <- numeric_data2[common_vars]
# 重新計算敘述統計
stats_data1 <- calc_stats(numeric_data1)
stats_data2 <- calc_stats(numeric_data2)
# 合併敘述統計
comparison <- cbind(stats_data1, stats_data2)
colnames(comparison) <- c("Mean_data1", "SD_data1", "Min_data1", "Max_data1",
"Mean_data2", "SD_data2", "Min_data2", "Max_data2")
# 查看合併結果
print(comparison)
# 合併資料並添加來源標籤
numeric_data1$source <- "data1"
numeric_data2$source <- "data2"
merged_data <- rbind(numeric_data1, numeric_data2)
# 繪製疊加柱狀圖
library(ggplot2)
ggplot(merged_data, aes(x = source, fill = as.factor(v1))) +
geom_bar(position = "fill") +
labs(title = "同意程度分佈", x = "資料集", y = "百分比", fill = "同意程度") +
theme_minimal()
ggplot(merged_data, aes(x = source, y = v1, fill = source)) +
geom_boxplot() +
labs(title = "同意程度 v1 的比較", x = "資料集", y = "v1 數值") +
theme_minimal()
#箱型圖
ggplot(merged_data, aes(x = source, y = v2, fill = source)) +
geom_boxplot() +
labs(title = "同意程度 v2 的比較", x = "資料集", y = "v1 數值") +
theme_minimal()
#箱型圖
ggplot(merged_data, aes(x = source, y = v4, fill = source)) +
geom_boxplot() +
labs(title = "同意程度 v4 的比較", x = "資料集", y = "v1 數值") +
theme_minimal()
ggplot(data1, aes(x = "data1", y = v1)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "v1 的分佈 (加入抖動)", x = "資料集", y = "同意程度") +
theme_minimal()
ggplot(data1, aes(x = source, y = v1)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.5) +
labs(title = "v1 的分佈 (加入抖動)", x = "資料集", y = "同意程度") +
theme_minimal()
library(reshape2)
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
library(reshape2)
library(reshape2)
install.packages("tidyverse")
library(tidyr)
library(dplyr)
library(reshape2)
library(reshape2)
# 準備資料
melted_data <- melt(merged_data, id.vars = "source")
library(ggplot2)
ggplot(melted_data, aes(x = variable, y = source, fill = value)) +
geom_tile() +
labs(title = "熱力圖比較", x = "變數", y = "資料集", fill = "同意程度") +
theme_minimal()
# 準備資料
melted_data <- melt(merged_data, id.vars = "source")
# 繪製箱型圖
ggplot(merged_data, aes(x = source, y = v4, fill = source)) +
geom_boxplot() +
labs(title = "同意程度 v4 的比較", x = "資料集", y = "v4 數值") +
theme_minimal()
# 轉換資料為長格式 (用於熱力圖)
library(tidyr)
melted_data <- merged_data %>%
pivot_longer(cols = -source, names_to = "variable", values_to = "value")
# 繪製熱力圖
ggplot(melted_data, aes(x = variable, y = source, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "熱力圖比較", x = "變數", y = "資料集", fill = "值") +
theme_minimal()
summary_data <- data.frame(
variable = names(data1)[4:60],
mean_data1 = sapply(data1[4:60], mean),
mean_data2 = sapply(data2[4:60], mean)
)
ggplot(summary_data, aes(x = variable)) +
geom_point(aes(y = mean_data1, color = "data1")) +
geom_point(aes(y = mean_data2, color = "data2")) +
labs(title = "變數平均值比較", x = "變數", y = "平均值") +
theme_minimal()
View(data1)
View(data1)
summary_data <- data.frame(
variable = names(data1)[4:60],
mean_data1 = sapply(data1[4:60], mean),
mean_data2 = sapply(data2[4:60], mean)
)
ggplot(summary_data, aes(x = variable)) +
geom_point(aes(y = mean_data1, color = "data1")) +
geom_point(aes(y = mean_data2, color = "data2")) +
labs(title = "變數平均值比較", x = "變數", y = "平均值") +
theme_minimal()
library(ggplot2)
# 保留原始資料順序，將變數設為有序因子
summary_data <- data.frame(
variable = factor(names(data1)[4:60], levels = names(data1)[4:60], ordered = TRUE), # 確保順序
mean_data1 = sapply(data1[4:60], mean, na.rm = TRUE),
mean_data2 = sapply(data2[4:60], mean, na.rm = TRUE)
)
# 繪製點圖並確保 X 軸順序一致
ggplot(summary_data, aes(x = variable)) +
geom_point(aes(y = mean_data1, color = "data1"), size = 3) +
geom_point(aes(y = mean_data2, color = "data2"), size = 3) +
labs(title = "變數平均值比較", x = "變數", y = "平均值") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # 旋轉 X 軸標籤以提高可讀性
library(ggplot2)
# 保留原始資料順序，將變數設為有序因子
summary_data <- data.frame(
variable = factor(names(data1)[4:60], levels = names(data1)[4:60], ordered = TRUE), # 確保順序
mean_data1 = sapply(data1[4:60], mean, na.rm = TRUE),
mean_data2 = sapply(data2[4:60], mean, na.rm = TRUE)
)
# 繪製點圖並確保 X 軸順序一致
ggplot(summary_data, aes(x = variable)) +
geom_point(aes(y = mean_data1, color = "data1"), size = 1) +
geom_point(aes(y = mean_data2, color = "data2"), size = 1) +
labs(title = "變數平均值比較", x = "變數", y = "平均值") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # 旋轉 X 軸標籤以提高可讀性
library(ggplot2)
# 保留原始資料順序，將變數設為有序因子
summary_data <- data.frame(
variable = factor(names(data1)[4:60], levels = names(data1)[4:60], ordered = TRUE), # 確保順序
mean_data1 = sapply(data1[4:60], mean, na.rm = TRUE),
mean_data2 = sapply(data2[4:60], mean, na.rm = TRUE)
)
# 繪製點圖並確保 X 軸順序一致
ggplot(summary_data, aes(x = variable)) +
geom_point(aes(y = mean_data1, color = "data1"), size = 2) +
geom_point(aes(y = mean_data2, color = "data2"), size = 2) +
labs(title = "變數平均值比較", x = "變數", y = "平均值") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # 旋轉 X 軸標籤以提高可讀性
# 合併資料並添加來源標籤
numeric_data1$source <- "data1"
numeric_data2$source <- "data2"
merged_data <- rbind(numeric_data1, numeric_data2)
library(ggplot2)
# 確認輸出目錄存在或創建目錄來保存圖表
output_dir <- "barplots"  # 輸出的資料夾名稱
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# 確定要繪製的變數列表，排除 "source" 欄位
variables <- setdiff(names(merged_data), "source")
# 迴圈生成每個變數的疊加柱狀圖
for (var in variables) {
# 動態生成柱狀圖
p <- ggplot(merged_data, aes_string(x = "source", fill = paste0("as.factor(", var, ")"))) +
geom_bar(position = "fill") +
labs(
title = paste(var, "同意程度分佈"),
x = "資料集",
y = "百分比",
fill = "同意程度"
) +
theme_minimal()
# 儲存圖表為 PNG 格式
ggsave(
filename = file.path(output_dir, paste0(var, "_barplot.png")),
plot = p,
width = 8,
height = 6
)
}
cat("所有變數的疊加柱狀圖已成功匯出至目錄:", output_dir, "\n")
setwd("C:/Users/huann/OneDrive/桌面/教育大數據")
# 繪製箱型圖
ggplot(merged_data, aes(x = source, y = v4, fill = source)) +
geom_boxplot() +
labs(title = "同意程度 v4 的比較", x = "資料集", y = "v4 數值") +
theme_minimal()
library(ggplot2)
# 確認輸出目錄是否存在，若不存在則創建
output_dir <- "boxplots"  # 設定輸出目錄名稱
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# 確認要繪製的變數列表，排除 "source" 欄位
variables <- setdiff(names(merged_data), "source")
# 使用迴圈為每個變數繪製箱型圖
for (var in variables) {
# 動態生成箱型圖
p <- ggplot(merged_data, aes_string(x = "source", y = var, fill = "source")) +
geom_boxplot() +
labs(
title = paste("同意程度", var, "的比較"),
x = "資料集",
y = paste(var, "數值"),
fill = "資料集"
) +
theme_minimal()
# 儲存圖表為 PNG 格式
ggsave(
filename = file.path(output_dir, paste0(var, "_boxplot.png")),
plot = p,
width = 8,
height = 6
)
}
cat("所有變數的箱型圖已成功匯出至目錄:", output_dir, "\n")
# 查看合併結果
print(comparison)
# 安裝並載入 writexl 套件
if (!require("writexl")) {
install.packages("writexl")
}
library(writexl)
# 匯出敘述統計到 Excel 檔案
write_xlsx(comparison, "comparison_stats.xlsx")
cat("敘述統計已成功匯出至檔案: comparison_stats.xlsx\n")
# 合併敘述統計
comparison <- cbind(stats_data1, stats_data2)
colnames(comparison) <- c("Mean_data1", "SD_data1", "Min_data1", "Max_data1",
"Mean_data2", "SD_data2", "Min_data2", "Max_data2")
rownames(comparison) <- common_vars  # 設置變數名稱為行索引
# 查看合併結果
print(comparison)
# 安裝並載入 writexl 套件
if (!require("writexl")) {
install.packages("writexl")
}
library(writexl)
# 匯出敘述統計到 Excel 檔案
write_xlsx(comparison, "comparison_stats.xlsx")
# 合併敘述統計
comparison <- cbind(stats_data1, stats_data2)
colnames(comparison) <- c("Mean_data1", "SD_data1", "Min_data1", "Max_data1",
"Mean_data2", "SD_data2", "Min_data2", "Max_data2")
rownames(comparison) <- common_vars  # 設置變數名稱為行索引
# 查看合併結果
print(comparison)
# 安裝並載入 writexl 套件
if (!require("writexl")) {
install.packages("writexl")
}
library(writexl)
# 匯出敘述統計到 Excel 檔案
write_xlsx(comparison, "comparison_stats.xlsx")
cat("敘述統計已成功匯出至檔案: comparison_stats.xlsx\n")
# 添加變數名稱到敘述統計
comparison <- cbind(stats_data1, stats_data2)
rownames(comparison) <- common_vars  # 設置變數名稱為行索引
colnames(comparison) <- c("Mean_data1", "SD_data1", "Min_data1", "Max_data1",
"Mean_data2", "SD_data2", "Min_data2", "Max_data2")
# 查看合併結果
print(comparison)
# 匯出敘述統計到 Excel
if (!require("writexl")) {
install.packages("writexl")
}
library(writexl)
write_xlsx(comparison, "comparison_stats.xlsx")
cat("敘述統計已成功匯出至檔案: comparison_stats.xlsx\n")
# 添加變數名稱到敘述統計
comparison <- cbind(stats_data1, stats_data2)
rownames(comparison) <- common_vars  # 設置變數名稱為行索引
colnames(comparison) <- c("Mean_data1", "SD_data1", "Min_data1", "Max_data1",
"Mean_data2", "SD_data2", "Min_data2", "Max_data2")
# 查看合併結果
print(comparison)
# 匯出敘述統計到 Excel
if (!require("writexl")) {
install.packages("writexl")
}
library(writexl)
write_xlsx(comparison, "comparison_stats.xlsx")
cat("敘述統計已成功匯出至檔案: comparison_stats.xlsx\n")
# 將行名稱 (變數名稱) 轉換為資料框中的獨立欄位
comparison <- cbind(Variable = rownames(comparison), comparison)
rownames(comparison) <- NULL  # 移除行名稱，避免干擾
# 使用 writexl 匯出
if (!require("writexl")) {
install.packages("writexl")
}
library(writexl)
# 匯出包含變數名稱的資料到 Excel
write_xlsx(comparison, "comparison_stats_with_variables.xlsx")
cat("敘述統計已成功匯出至檔案: comparison_stats_with_variables.xlsx\n")

library(writexl)
#
匯
出
敘
述
統
計
到 Excel
檔
案
write_xlsx(comparison, "comparison_stats.xlsx")
cat("
敘
述
統
計
已
成
功
匯
出
至
檔
案: comparison_stats.xlsx\n")
#
添
加
變
數
名
稱
到
敘
述
統
計
comparison <- cbind(stats_data1, stats_data2)
rownames(comparison) <- common_vars  #
設
置
變
數
名
稱
為
行
索
引
colnames(comparison) <- c("Mean_data1", "SD_data1", "Min_data1", "Max_data1",
"Mean_data2", "SD_data2", "Min_data2", "Max_data2")
#
查
看
合
併
結
果
print(comparison)
#
匯
出
敘
述
統
計
到 Excel
if (!require("writexl")) {
install.packages("writexl")
}
library(writexl)
write_xlsx(comparison, "comparison_stats.xlsx")
cat("
敘
述
統
計
已
成
功
匯
出
至
檔
案: comparison_stats.xlsx\n")
#
添
加
變
數
名
稱
到
敘
述
統
計
comparison <- cbind(stats_data1, stats_data2)
rownames(comparison) <- common_vars  #
設
置
變
數
名
稱
為
行
索
引
colnames(comparison) <- c("Mean_data1", "SD_data1", "Min_data1", "Max_data1",
"Mean_data2", "SD_data2", "Min_data2", "Max_data2")
#
查
看
合
併
結
果
print(comparison)
#
匯
出
敘
述
統
計
到 Excel
if (!require("writexl")) {
install.packages("writexl")
}
library(writexl)
write_xlsx(comparison, "comparison_stats.xlsx")
cat("
敘
述
統
計
已
成
功
匯
出
至
檔
案: comparison_stats.xlsx\n")
#
將
行
名
稱 (
變
數
名
稱)
轉
換
為
資
料
框
中
的
獨
立
欄
位
comparison <- cbind(Variable = rownames(comparison), comparison)
rownames(comparison) <- NULL  #
移
除
行
名
稱
，
避
免
干
擾
#
使
用 writexl
匯
出
if (!require("writexl")) {
install.packages("writexl")
}
library(writexl)
#
匯
出
包
含
變
數
名
稱
的
資
料
到 Excel
write_xlsx(comparison, "comparison_stats_with_variables.xlsx")
cat("
敘
述
統
計
已
成
功
匯
出
至
檔
案: comparison_stats_with_variables.xlsx\n")
q()
library(lavaan)
library(psych)
library(factoextra)
setwd("C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\原始資料")
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
sum(is.na(data1))
data1_complete <- na.omit(data1)
data_items <- data1_complete[ ,grep("^v[0-9]+$" ,names(data1_complete))]
eigenvalues <- eigen(cor(data_items))$values
print(eigenvalues)
pca_result <- fa(r = data_items, nfactors = 6, rotate = "varimax")
print(pca_result)
paf_result <- fa(r = data_items, nfactors = 6, rotate = "varimax" ,fm = "pa")
ml_result <- fa(r = data_items, nfactors = 6, rotate = "varimax" ,fm = "ml")
View(ml_result)
View(ml_result)
View(paf_result)
View(pca_result)
# 定義分析方法的名稱與對應 fa() 參數
methods <- list(
minres = "minres",
ml = "ml",
pa = "pa"
)
# 建立空的 list 存結果
item_counts <- list()
# 根據每種方法執行因素分析，抓出 max loading 所屬因子
for (method in names(methods)) {
result <- fa(data_items, nfactors = 6, rotate = "varimax", fm = methods[[method]])
loadings <- as.data.frame(unclass(result$loadings))
# 將每題歸屬於 loading 最大的因子
loadings$max <- colnames(loadings)[apply(abs(loadings), 1, which.max)]
# 計算每個因子底下有幾題
item_counts[[method]] <- table(loadings$max)
}
# 主成分分析 (PCA)
pca_result <- principal(data_items, nfactors = 6, rotate = "varimax")
loadings_pca <- as.data.frame(unclass(pca_result$loadings))
loadings_pca$max <- colnames(loadings_pca)[apply(abs(loadings_pca), 1, which.max)]
item_counts[["pca"]] <- table(loadings_pca$max)
# 整理成資料框
count_df <- do.call(cbind, item_counts)
count_df[is.na(count_df)] <- 0  # 補 NA 為 0
count_df
# 定義分析方法的名稱與對應 fa() 參數
methods <- list(
minres = "minres",
ml = "ml",
pa = "pa"
)
# 建立空的 list 存結果
item_counts <- list()
# 根據每種方法執行因素分析，抓出 max loading 所屬因子
for (method in names(methods)) {
result <- fa(data_items, nfactors = 6, rotate = "varimax", fm = methods[[method]])
loadings <- as.data.frame(unclass(result$loadings))
# 將每題歸屬於 loading 最大的因子
loadings$max <- colnames(loadings)[apply(abs(loadings), 1, which.max)]
# 計算每個因子底下有幾題
item_counts[[method]] <- table(loadings$max)
}
library(lavaan)
library(psych)
library(factoextra)
setwd("C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\原始資料")
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
sum(is.na(data1))
data1_complete <- na.omit(data1)
data_items <- data1_complete[ ,grep("^v[0-9]+$" ,names(data1_complete))]
# 定義分析方法的名稱與對應 fa() 參數
methods <- list(
minres = "minres",
ml = "ml",
pa = "pa"
)
# 建立空的 list 存結果
item_counts <- list()
# 根據每種方法執行因素分析，抓出 max loading 所屬因子
for (method in names(methods)) {
result <- fa(data_items, nfactors = 6, rotate = "varimax", fm = methods[[method]])
loadings <- as.data.frame(unclass(result$loadings))
# 將每題歸屬於 loading 最大的因子
loadings$max <- colnames(loadings)[apply(abs(loadings), 1, which.max)]
# 計算每個因子底下有幾題
item_counts[[method]] <- table(loadings$max)
}
# 主成分分析 (PCA)
pca_result <- principal(data_items, nfactors = 6, rotate = "varimax")
loadings_pca <- as.data.frame(unclass(pca_result$loadings))
loadings_pca$max <- colnames(loadings_pca)[apply(abs(loadings_pca), 1, which.max)]
item_counts[["pca"]] <- table(loadings_pca$max)
# 整理成資料框
count_df <- do.call(cbind, item_counts)
count_df[is.na(count_df)] <- 0  # 補 NA 為 0
count_df
# 安裝必要套件
install.packages("psych")
install.packages("GPArotation")
library(psych)
# 載入資料
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
# 篩選題目欄位 v1~v60
data_items <- data1[, grep("^v[0-9]+$", names(data1))]
# 去除 NA 或補值（你可選擇）
data_items <- na.omit(data_items)
# 建立結果儲存列表
methods <- c("minres", "ml", "pa")
results_list <- list()
for (m in methods) {
fa_res <- fa(data_items, nfactors = 6, rotate = "varimax", fm = m)
loadings <- as.data.frame(unclass(fa_res$loadings))
loadings$max <- colnames(loadings)[apply(abs(loadings), 1, which.max)]
item_table <- table(loadings$max)
metrics <- data.frame(
method = m,
RMSEA = fa_res$RMSEA[1],
TLI = fa_res$TLI,
RMSR = fa_res$rms
)
results_list[[m]] <- list(metrics = metrics, items = loadings)
}
# PCA 額外處理
pca_res <- principal(data_items, nfactors = 6, rotate = "varimax")
loadings_pca <- as.data.frame(unclass(pca_res$loadings))
loadings_pca$max <- colnames(loadings_pca)[apply(abs(loadings_pca), 1, which.max)]
metrics_pca <- data.frame(
method = "pca",
RMSEA = NA,
TLI = NA,
RMSR = pca_res$rms
)
results_list[["pca"]] <- list(metrics = metrics_pca, items = loadings_pca)
# 彙整成表格
all_metrics <- do.call(rbind, lapply(results_list, function(x) x$metrics))
all_items <- do.call(rbind, lapply(names(results_list), function(name) {
df <- results_list[[name]]$items
df$method <- name
df$item <- rownames(df)
return(df[, c("item", "max", "method")])
}))
# 輸出查看
print(all_metrics)
print(head(all_items, 10))
# 輸出查看
print(all_metrics)
print(head(all_items, 10))
View(all_items)
item_groups <- pivot_wider(all_items, names_from = method, values_from = max)
install.packages("tidyr")
library(tidyr)
item_groups <- pivot_wider(all_items, names_from = method, values_from = max)
colnames(item_groups) <- c("item", "minres_group", "ml_group", "pa_group")
View(item_groups)
library(lavaan)
library(psych)
library(factoextra)
setwd("C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\原始資料")
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
sum(is.na(data1))
data1_complete <- na.omit(data1)
data_items <- data1_complete[ ,grep("^v[0-9]+$" ,names(data1_complete))]
eigenvalues <- eigen(cor(data_items))$values
print(eigenvalues)
pca_result <- fa(r = data_items, nfactors = 6, rotate = "varimax")
print(pca_result)
pa_result <- fa(r = data_items, nfactors = 6, rotate = "varimax" ,fm = "pa")
ml_result <- fa(r = data_items, nfactors = 6, rotate = "varimax" ,fm = "ml")
# 定義分析方法的名稱與對應 fa() 參數
methods <- list(
minres = "minres",
ml = "ml",
pa = "pa"
)
# 建立空的 list 存結果
item_counts <- list()
# 根據每種方法執行因素分析，抓出 max loading 所屬因子
for (method in names(methods)) {
result <- fa(data_items, nfactors = 6, rotate = "varimax", fm = methods[[method]])
loadings <- as.data.frame(unclass(result$loadings))
# 將每題歸屬於 loading 最大的因子
loadings$max <- colnames(loadings)[apply(abs(loadings), 1, which.max)]
# 計算每個因子底下有幾題
item_counts[[method]] <- table(loadings$max)
}
# 主成分分析 (PCA)
pca_result <- principal(data_items, nfactors = 6, rotate = "varimax")
loadings_pca <- as.data.frame(unclass(pca_result$loadings))
loadings_pca$max <- colnames(loadings_pca)[apply(abs(loadings_pca), 1, which.max)]
item_counts[["pca"]] <- table(loadings_pca$max)
# 整理成資料框
count_df <- do.call(cbind, item_counts)
count_df[is.na(count_df)] <- 0  # 補 NA 為 0
count_df
# 安裝必要套件
install.packages("psych")
install.packages("GPArotation")
library(psych)
# 載入資料
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
# 篩選題目欄位 v1~v60
data_items <- data1[, grep("^v[0-9]+$", names(data1))]
# 去除 NA 或補值（你可選擇）
data_items <- na.omit(data_items)
# 建立結果儲存列表, minres:最小平方法, ml:主軸抽取法, pa:最大似然法
methods <- c("minres", "ml", "pa")
results_list <- list()
for (m in methods) {
fa_res <- fa(data_items, nfactors = 6, rotate = "varimax", fm = m)
loadings <- as.data.frame(unclass(fa_res$loadings))
loadings$max <- colnames(loadings)[apply(abs(loadings), 1, which.max)]
item_table <- table(loadings$max)
metrics <- data.frame(
method = m,
RMSEA = fa_res$RMSEA[1],
TLI = fa_res$TLI,
RMSR = fa_res$rms
)
results_list[[m]] <- list(metrics = metrics, items = loadings)
}
# PCA 額外處理
pca_res <- principal(data_items, nfactors = 6, rotate = "varimax")
loadings_pca <- as.data.frame(unclass(pca_res$loadings))
loadings_pca$max <- colnames(loadings_pca)[apply(abs(loadings_pca), 1, which.max)]
metrics_pca <- data.frame(
method = "pca",
RMSEA = NA,
TLI = NA,
RMSR = pca_res$rms
)
results_list[["pca"]] <- list(metrics = metrics_pca, items = loadings_pca)
# 彙整成表格
all_metrics <- do.call(rbind, lapply(results_list, function(x) x$metrics))
all_items <- do.call(rbind, lapply(names(results_list), function(name) {
df <- results_list[[name]]$items
df$method <- name
df$item <- rownames(df)
return(df[, c("item", "max", "method")])
}))
library(tidyr)
item_groups <- pivot_wider(all_items, names_from = method, values_from = max)
colnames(item_groups) <- c("item", "minres_group", "ml_group", "pa_group", "pca_group")
# 輸出查看
print(all_metrics)
print(head(all_items, 10))
View(item_groups)
# 安裝必要套件
install.packages("psych")
install.packages("GPArotation")
library(psych)
# 載入資料
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
# 篩選題目欄位 v1~v60
data_items <- data1[, grep("^v[0-9]+$", names(data1))]
# 去除 NA 或補值（你可選擇）
data_items <- na.omit(data_items)
# 建立結果儲存列表, minres:最小平方法, ml:主軸抽取法, pa:最大似然法
methods <- c("minres", "ml", "pa")
results_list <- list()
for (m in methods) {
fa_res <- fa(data_items, nfactors = 6, rotate = "varimax", fm = m)
loadings <- as.data.frame(unclass(fa_res$loadings))
loadings$max <- colnames(loadings)[apply(abs(loadings), 1, which.max)]
item_table <- table(loadings$max)
metrics <- data.frame(
method = m,
RMSEA = fa_res$RMSEA[1],
TLI = fa_res$TLI,
RMSR = fa_res$rms
)
results_list[[m]] <- list(metrics = metrics, items = loadings)
}
# PCA 額外處理
pca_res <- principal(data_items, nfactors = 6, rotate = "varimax")
loadings_pca <- as.data.frame(unclass(pca_res$loadings))
loadings_pca$max <- colnames(loadings_pca)[apply(abs(loadings_pca), 1, which.max)]
metrics_pca <- data.frame(
method = "pca",
RMSEA = NA,
TLI = NA,
RMSR = pca_res$rms
)
results_list[["pca"]] <- list(metrics = metrics_pca, items = loadings_pca)
# 彙整成表格
all_metrics <- do.call(rbind, lapply(results_list, function(x) x$metrics))
all_items <- do.call(rbind, lapply(names(results_list), function(name) {
df <- results_list[[name]]$items
df$method <- name
df$item <- rownames(df)
return(df[, c("item", "max", "method")])
}))
library(tidyr)
item_groups <- pivot_wider(all_items, names_from = method, values_from = max)
colnames(item_groups) <- c("item", "minres_group", "ml_group", "pa_group", "pca_group")
# 輸出查看
print(all_metrics)
print(head(all_items, 10))
View(item_groups)

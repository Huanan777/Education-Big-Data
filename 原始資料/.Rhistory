F4 =~ v26 + v27 + v28 + v29 + v30 + v31
F5 =~ v35 + v36 + v38 + v39 + v40 + v41 + v43 + v44
F6 =~ v46 + v47 + v50 + v52 + v56 + v57 + v59 + v60
'
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "MLR")
# 顯示適配度指標（包含 CFI）
fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
# 建立六因子模型語法
model <- '
F1 =~ v2 + v3 + v9 + v10 + v11 + v13 + v55
F2 =~ v14 + v15 + v16 + v18 + v19 + v20
F3 =~ v21 + v22 + v23 + v24 + v25
F4 =~ v26 + v27 + v28 + v29 + v30 + v31
F5 =~ v35 + v36 + v38 + v39 + v40 + v41 + v43 + v44
F6 =~ v46 + v47 + v50 + v52 + v56 + v57 + v59 + v60
'
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items,
estimator = "WLSMV",
ordered = colnames(data_items))
# 顯示適配度指標（包含 CFI）
fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
setwd("C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\原始資料")
library(psych)
# 載入資料
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
# 篩選題目欄位 v1~v60
data_items <- data1[, grep("^v[0-9]+$", names(data1))]
# 去除 NA 或補值（你可選擇）
data_items <- na.omit(data_items)
# 建立結果儲存列表, minres:最小平方法, ml:主軸抽取法, pa:最大似然法
methods <- c("minres", "ml", "pa")
results_list <- list()
for (m in methods) {
fa_res <- fa(data_items, nfactors = 6, rotate = "varimax", fm = m)
loadings <- as.data.frame(unclass(fa_res$loadings))
loadings$max <- colnames(loadings)[apply(abs(loadings), 1, which.max)]
item_table <- table(loadings$max)
metrics <- data.frame(
method = m,
RMSEA = fa_res$RMSEA[1],
TLI = fa_res$TLI,
RMSR = fa_res$rms
)
results_list[[m]] <- list(metrics = metrics, items = loadings)
}
# PCA 額外處理
pca_res <- principal(data_items, nfactors = 6, rotate = "varimax")
loadings_pca <- as.data.frame(unclass(pca_res$loadings))
loadings_pca$max <- colnames(loadings_pca)[apply(abs(loadings_pca), 1, which.max)]
metrics_pca <- data.frame(
method = "pca",
RMSEA = NA,
TLI = NA,
RMSR = pca_res$rms
)
results_list[["pca"]] <- list(metrics = metrics_pca, items = loadings_pca)
# 彙整成表格
all_metrics <- do.call(rbind, lapply(results_list, function(x) x$metrics))
all_items <- do.call(rbind, lapply(names(results_list), function(name) {
df <- results_list[[name]]$items
df$method <- name
df$item <- rownames(df)
return(df[, c("item", "max", "method")])
}))
library(tidyr)
item_groups <- pivot_wider(all_items, names_from = method, values_from = max)
colnames(item_groups) <- c("item", "minres_group", "ml_group", "pa_group", "pca_group")
# 輸出查看
print(all_metrics)
print(head(all_items, 10))
View(item_groups)
# 建立六因子模型語法
model <- '
F1 =~ v1 + v2 + v3 + v4 + v5 + v9 + v10 + v11 + v13 + v55
F2 =~ v14 + v15 + v16 + v18 + v19 + v20
F3 =~ v21 + v22 + v23 + v24 + v25
F4 =~ v26 + v27 + v28 + v29 + v30 + v31
F5 =~ v32 + v35 + v36 + v38 + v39 + v40 + v41 + v43 + v44
F6 =~ v46 + v47 + v49 + v50 + v52 + v56 + v57 + v59 + v60
'
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "ML")
# 顯示適配度指標（包含 CFI）
fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "MLM")
# 顯示適配度指標（包含 CFI）
fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "MLR")
# 顯示適配度指標（包含 CFI）
fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "ULS")
# 顯示適配度指標（包含 CFI）
fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "WLS")
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "WLSM")
# 顯示適配度指標（包含 CFI）
fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "WLSMV")
# 顯示適配度指標（包含 CFI）
fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "DWLS")
# 顯示適配度指標（包含 CFI）
fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "GLS")
# 顯示適配度指標（包含 CFI）
fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
setwd("C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\原始資料")
library(lavaan)
# 載入資料
data1 <- read.csv("data_2.csv", stringsAsFactors = FALSE)
library(lavaan)
library(purrr)
# === 1. 題目分群設定 ===
factor_groups <- list(
F1 = c("v1", "v2", "v3", "v4", "v5", "v9", "v10", "v11", "v13", "v55"),
F2 = c("v14", "v15", "v16", "v18", "v19", "v20"),
F3 = c("v21", "v22", "v23", "v24", "v25"),
F4 = c("v26", "v27", "v28", "v29", "v30", "v31"),
F5 = c("v32", "v35", "v36", "v38", "v39", "v40", "v41", "v43", "v44"),
F6 = c("v46", "v47", "v49", "v50", "v52", "v56", "v57", "v59", "v60")
)
# === 2. 讀資料並處理缺值 ===
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
data_items <- data1[, grep("^v[0-9]+$", names(data1))]
data_items <- na.omit(data_items)
# === 3. 記錄符合 CFI ≥ 0.90 的結果 ===
results <- data.frame(Factor = character(), Items = character(), Estimator = character(),
CFI = numeric(), TLI = numeric(), RMSEA = numeric(), SRMR = numeric(),
stringsAsFactors = FALSE)
# === 4. 跑每個構面 ===
for (factor_name in names(factor_groups)) {
item_pool <- factor_groups[[factor_name]]
for (k in 3:length(item_pool)) {
combos <- combn(item_pool, k, simplify = FALSE)
for (item_set in combos) {
item_str <- paste(item_set, collapse = " + ")
model <- paste0(factor_name, " =~ ", item_str)
for (est in c("MLR", "WLSMV")) {
fit <- tryCatch({
if (est == "WLSMV") {
cfa(model, data = data_items, estimator = est, ordered = item_set)
} else {
cfa(model, data = data_items, estimator = est)
}
}, error = function(e) NULL)
if (!is.null(fit) && lavInspect(fit, "converged")) {
fit_index <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
if (fit_index["cfi"] >= 0.90) {
results <- rbind(results, data.frame(
Factor = factor_name,
Items = paste(item_set, collapse = ","),
Estimator = est,
CFI = fit_index["cfi"],
TLI = fit_index["tli"],
RMSEA = fit_index["rmsea"],
SRMR = fit_index["srmr"]
))
}
}
}
}
}
}
library(lavaan)
library(purrr)
# === 1. 題目分群設定 ===
factor_groups <- list(
F1 = c("v1", "v2", "v3", "v4", "v5", "v9", "v10", "v11", "v13", "v55"),
F2 = c("v14", "v15", "v16", "v18", "v19", "v20"),
F3 = c("v21", "v22", "v23", "v24", "v25"),
F4 = c("v26", "v27", "v28", "v29", "v30", "v31"),
F5 = c("v32", "v35", "v36", "v38", "v39", "v40", "v41", "v43", "v44"),
F6 = c("v46", "v47", "v49", "v50", "v52", "v56", "v57", "v59", "v60")
)
# === 2. 讀資料並處理缺值 ===
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
data_items <- data1[, grep("^v[0-9]+$", names(data1))]
data_items <- na.omit(data_items)
# === 3. 記錄符合 CFI ≥ 0.90 的結果 ===
results <- data.frame(Factor = character(), Items = character(), Estimator = character(),
CFI = numeric(), TLI = numeric(), RMSEA = numeric(), SRMR = numeric(),
stringsAsFactors = FALSE)
# === 4. 跑每個構面 ===
for (factor_name in names(factor_groups)) {
item_pool <- factor_groups[[factor_name]]
for (k in 3:length(item_pool)) {
combos <- combn(item_pool, k, simplify = FALSE)
for (item_set in combos) {
item_str <- paste(item_set, collapse = " + ")
model <- paste0(factor_name, " =~ ", item_str)
for (est in c("MLR", "WLSMV")) {
fit <- tryCatch({
if (est == "WLSMV") {
cfa(model, data = data_items, estimator = est, ordered = item_set)
} else {
cfa(model, data = data_items, estimator = est)
}
}, error = function(e) NULL)
if (!is.null(fit) && lavInspect(fit, "converged")) {
fit_index <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
if (fit_index["cfi"] >= 0.90) {
results <- rbind(results, data.frame(
Factor = factor_name,
Items = paste(item_set, collapse = ","),
Estimator = est,
CFI = fit_index["cfi"],
TLI = fit_index["tli"],
RMSEA = fit_index["rmsea"],
SRMR = fit_index["srmr"]
))
}
}
}
}
}
}
# 載入資料
data1 <- read.csv("data_2.csv", stringsAsFactors = FALSE, fileEncoding = "big5")
setwd("C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\原始資料")
library(lavaan)
# 載入資料
data1 <- read.csv("data_2.csv", stringsAsFactors = FALSE, fileEncoding = "big5")
# 選出題目欄位（v1 ~ v60）
data_items <- data1[, grep("^v[0-9]+$", names(data1))]
# 處理缺值（直接刪除不完整的個案）
data_items <- na.omit(data_items)
# 建立六因子模型語法
model <- '
F1 =~ v1 + v2 + v3 + v4 + v5 + v9 + v10 + v11 + v13 + v55
F2 =~ v14 + v15 + v16 + v18 + v19 + v20
F3 =~ v21 + v22 + v23 + v24 + v25
F4 =~ v26 + v27 + v28 + v29 + v30 + v31
F5 =~ v32 + v35 + v36 + v38 + v39 + v40 + v41 + v43 + v44
F6 =~ v46 + v47 + v49 + v50 + v52 + v56 + v57 + v59 + v60
'
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "GLS")
setwd("C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\原始資料")
library(lavaan)
# 載入資料
data1 <- read.csv("data_2.csv", stringsAsFactors = FALSE, fileEncoding = "big5")
# 選出題目欄位（v1 ~ v60）
data_items <- data1[, grep("^v[0-9]+$", names(data1))]
# 處理缺值（直接刪除不完整的個案）
data_items <- na.omit(data_items)
# 建立六因子模型語法
model <- '
F1 =~ v1 + v2 + v3 + v4 + v5 + v9 + v10 + v11 + v13 + v55
F2 =~ v14 + v15 + v16 + v18 + v19 + v20
F3 =~ v21 + v22 + v23 + v24 + v25
F4 =~ v26 + v27 + v28 + v29 + v30 + v31
F5 =~ v32 + v35 + v36 + v38 + v39 + v40 + v41 + v43 + v44
F6 =~ v46 + v47 + v49 + v50 + v52 + v56 + v57 + v59 + v60
'
# 執行確認性因素分析（CFA）
fit <- cfa(model, data = data_items, estimator = "WLSM")
# 顯示適配度指標（包含 CFI）
fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
library(lavaan)
library(purrr)
# === 1. 題目分群設定 ===
factor_groups <- list(
F1 = c("v1", "v2", "v3", "v4", "v5", "v9", "v10", "v11", "v13", "v55"),
F2 = c("v14", "v15", "v16", "v18", "v19", "v20"),
F3 = c("v21", "v22", "v23", "v24", "v25"),
F4 = c("v26", "v27", "v28", "v29", "v30", "v31"),
F5 = c("v32", "v35", "v36", "v38", "v39", "v40", "v41", "v43", "v44"),
F6 = c("v46", "v47", "v49", "v50", "v52", "v56", "v57", "v59", "v60")
)
# === 2. 讀資料並處理缺值 ===
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
data_items <- data1[, grep("^v[0-9]+$", names(data1))]
data_items <- na.omit(data_items)
# === 3. 記錄符合 CFI ≥ 0.90 的結果 ===
results <- data.frame(Factor = character(), Items = character(), Estimator = character(),
CFI = numeric(), TLI = numeric(), RMSEA = numeric(), SRMR = numeric(),
stringsAsFactors = FALSE)
# === 4. 跑每個構面 ===
for (factor_name in names(factor_groups)) {
item_pool <- factor_groups[[factor_name]]
for (k in 3:length(item_pool)) {
combos <- combn(item_pool, k, simplify = FALSE)
for (item_set in combos) {
item_str <- paste(item_set, collapse = " + ")
model <- paste0(factor_name, " =~ ", item_str)
for (est in c("MLR", "WLSMV")) {
fit <- tryCatch({
if (est == "WLSMV") {
cfa(model, data = data_items, estimator = est, ordered = item_set)
} else {
cfa(model, data = data_items, estimator = est)
}
}, error = function(e) NULL)
if (!is.null(fit) && lavInspect(fit, "converged")) {
fit_index <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
if (fit_index["cfi"] >= 0.90) {
results <- rbind(results, data.frame(
Factor = factor_name,
Items = paste(item_set, collapse = ","),
Estimator = est,
CFI = fit_index["cfi"],
TLI = fit_index["tli"],
RMSEA = fit_index["rmsea"],
SRMR = fit_index["srmr"]
))
}
}
}
}
}
}
# === 5. 輸出結果 ===
View(results)  # 可用來看表格
# write.csv(results, "all_factor_cfa_results_CFI90.csv", row.names = FALSE)
results <- subset(results, CFI < 1 & RMSEA > 0 & TLI <= 1)
View(results)  # 可用來看表格
# write.csv(results, "all_factor_cfa_results_CFI90.csv", row.names = FALSE)
results_clean <- subset(results,
CFI < 1 &                      # 排除完美（但可能虛假的）CFI
TLI <= 1 &                    # TLI 超過 1 通常為錯誤
RMSEA > 0 & RMSEA < 0.10 &    # RMSEA 太小（0）或太大都不理想
SRMR < 0.10                   # SRMR 太大代表模型誤差大
)
View(results)  # 可用來看表格
# write.csv(results, "all_factor_cfa_results_CFI90.csv", row.names = FALSE)
results_clean <- subset(results,
CFI < 1 &                      # 排除完美（但可能虛假的）CFI
TLI <= 1 &                    # TLI 超過 1 通常為錯誤
RMSEA > 0 & RMSEA < 0.10 &    # RMSEA 太小（0）或太大都不理想
SRMR < 0.10                   # SRMR 太大代表模型誤差大
)
View(results)  # 可用來看表格
# write.csv(results, "all_factor_cfa_results_CFI90.csv", row.names = FALSE)
results_clean <- subset(results,
CFI < 1 &                      # 排除完美（但可能虛假的）CFI
TLI <= 1 &                    # TLI 超過 1 通常為錯誤
RMSEA > 0 & RMSEA < 0.10 &    # RMSEA 太小（0）或太大都不理想
SRMR < 0.10                   # SRMR 太大代表模型誤差大
)
View(results_clean)  # 可用來看表格
# write.csv(results, "all_factor_cfa_results_CFI90.csv", row.names = FALSE)
# === 5. 輸出結果 ===
results_clean <- subset(results,
CFI < 1 & CFI>=0.9    &              # 排除完美（但可能虛假的）CFI
TLI <= 1 & TLI>=0.9   &                # TLI 超過 1 通常為錯誤
RMSEA > 0 & RMSEA < 0.08 &    # RMSEA 太小（0）或太大都不理想
SRMR < 0.08                 # SRMR 太大代表模型誤差大
)
View(results_clean)  # 可用來看表格
# write.csv(results, "all_factor_cfa_results_CFI90.csv", row.names = FALSE)
results_clean$Item_Count <- sapply(strsplit(results_clean$Items, ","), length)
View(results_clean)  # 可用來看表格
results_clean <- subset(results,
CFI < 1 & CFI>=0.9    &              # 排除完美（但可能虛假的）CFI
TLI <= 1 & TLI>=0.9   &                # TLI 超過 1 通常為錯誤
RMSEA > 0 & RMSEA < 0.05 &    # RMSEA 太小（0）或太大都不理想
SRMR < 0.05                 # SRMR 太大代表模型誤差大
)
results_clean$Item_Count <- sapply(strsplit(results_clean$Items, ","), length)
View(results_clean)  # 可用來看表格
#
write.csv(results_clean, "aresults1_CFI90.csv", row.names = FALSE)
# === 5. 輸出結果 ===
results_clean <- subset(results,
CFI < 1 & CFI>=0.9    &              # 排除完美（但可能虛假的）CFI
TLI <= 1 & TLI>=0.9   &                # TLI 超過 1 通常為錯誤
RMSEA > 0 & RMSEA < 0.08 &    # RMSEA 太小（0）或太大都不理想
SRMR < 0.08                 # SRMR 太大代表模型誤差大
)
results_clean$Item_Count <- sapply(strsplit(results_clean$Items, ","), length)
View(results_clean)  # 可用來看表格
write.csv(results_clean, "aresults1_CFI90.csv", row.names = FALSE)
setwd("C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\原始資料")
write.csv(results_clean, "C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\aresults1_CFI90.csv", row.names = FALSE)
write.csv(results_clean, "C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\results1_CFI90.csv", row.names = FALSE)
library(lavaan)
library(purrr)
# === 1. 題目分群設定 ===
factor_groups <- list(
F1 = c("v1", "v2", "v3", "v4", "v5", "v9", "v10", "v11", "v13", "v55"),
F2 = c("v14", "v15", "v16", "v18", "v19", "v20"),
F3 = c("v21", "v22", "v23", "v24", "v25"),
F4 = c("v26", "v27", "v28", "v29", "v30", "v31"),
F5 = c("v32", "v35", "v36", "v38", "v39", "v40", "v41", "v43", "v44"),
F6 = c("v46", "v47", "v49", "v50", "v52", "v56", "v57", "v59", "v60")
)
# === 2. 讀資料並處理缺值 ===
data1 <- read.csv("data_2.csv", stringsAsFactors = FALSE, fileEncoding = "big5")
data_items <- data1[, grep("^v[0-9]+$", names(data1))]
data_items <- na.omit(data_items)
# === 3. 記錄符合 CFI ≥ 0.90 的結果 ===
results <- data.frame(Factor = character(), Items = character(), Estimator = character(),
CFI = numeric(), TLI = numeric(), RMSEA = numeric(), SRMR = numeric(),
stringsAsFactors = FALSE)
# === 4. 跑每個構面 ===
for (factor_name in names(factor_groups)) {
item_pool <- factor_groups[[factor_name]]
for (k in 3:length(item_pool)) {
combos <- combn(item_pool, k, simplify = FALSE)
for (item_set in combos) {
item_str <- paste(item_set, collapse = " + ")
model <- paste0(factor_name, " =~ ", item_str)
for (est in c("MLR", "WLSMV")) {
fit <- tryCatch({
if (est == "WLSMV") {
cfa(model, data = data_items, estimator = est, ordered = item_set)
} else {
cfa(model, data = data_items, estimator = est)
}
}, error = function(e) NULL)
if (!is.null(fit) && lavInspect(fit, "converged")) {
fit_index <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
if (fit_index["cfi"] >= 0.90) {
results <- rbind(results, data.frame(
Factor = factor_name,
Items = paste(item_set, collapse = ","),
Estimator = est,
CFI = fit_index["cfi"],
TLI = fit_index["tli"],
RMSEA = fit_index["rmsea"],
SRMR = fit_index["srmr"]
))
}
}
}
}
}
}
# === 5. 輸出結果 ===
results_clean <- subset(results,
CFI < 1 & CFI>=0.9    &              # 排除完美（但可能虛假的）CFI
TLI <= 1 & TLI>=0.9   &                # TLI 超過 1 通常為錯誤
RMSEA > 0 & RMSEA < 0.08 &    # RMSEA 太小（0）或太大都不理想
SRMR < 0.08                 # SRMR 太大代表模型誤差大
)
results_clean$Item_Count <- sapply(strsplit(results_clean$Items, ","), length)
View(results_clean)  # 可用來看表格
write.csv(results_clean, "C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\results1_CFI90.csv", row.names = FALSE)
write.csv(results_clean, "C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\results2_CFI90.csv", row.names = FALSE)
library(lavaan)
library(purrr)
# === 1. 題目分群設定 ===
factor_groups <- list(
F1 = c("v1", "v2", "v3", "v4", "v5", "v9", "v10", "v11", "v13", "v55"),
F2 = c("v14", "v15", "v16", "v18", "v19", "v20"),
F3 = c("v21", "v22", "v23", "v24", "v25"),
F4 = c("v26", "v27", "v28", "v29", "v30", "v31"),
F5 = c("v32", "v35", "v36", "v38", "v39", "v40", "v41", "v43", "v44"),
F6 = c("v46", "v47", "v49", "v50", "v52", "v56", "v57", "v59", "v60")
)
# === 2. 讀資料並處理缺值 ===
data1 <- read.csv("data_1.csv", stringsAsFactors = FALSE)
data_items <- data1[, grep("^v[0-9]+$", names(data1))]
data_items <- na.omit(data_items)
# === 3. 記錄符合 CFI ≥ 0.90 的結果 ===
results <- data.frame(Factor = character(), Items = character(), Estimator = character(),
CFI = numeric(), TLI = numeric(), RMSEA = numeric(), SRMR = numeric(),
stringsAsFactors = FALSE)
# === 4. 跑每個構面 ===
for (factor_name in names(factor_groups)) {
item_pool <- factor_groups[[factor_name]]
for (k in 3:length(item_pool)) {
combos <- combn(item_pool, k, simplify = FALSE)
for (item_set in combos) {
item_str <- paste(item_set, collapse = " + ")
model <- paste0(factor_name, " =~ ", item_str)
for (est in c("MLR", "WLSMV")) {
fit <- tryCatch({
if (est == "WLSMV") {
cfa(model, data = data_items, estimator = est, ordered = item_set)
} else {
cfa(model, data = data_items, estimator = est)
}
}, error = function(e) NULL)
if (!is.null(fit) && lavInspect(fit, "converged")) {
fit_index <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
if (fit_index["cfi"] >= 0.90) {
results <- rbind(results, data.frame(
Factor = factor_name,
Items = paste(item_set, collapse = ","),
Estimator = est,
CFI = fit_index["cfi"],
TLI = fit_index["tli"],
RMSEA = fit_index["rmsea"],
SRMR = fit_index["srmr"]
))
}
}
}
}
}
}
# === 5. 輸出結果 ===
results_clean <- subset(results,
CFI < 1 & CFI>=0.9    &              # 排除完美（但可能虛假的）CFI
TLI <= 1 & TLI>=0.9   &                # TLI 超過 1 通常為錯誤
RMSEA > 0 & RMSEA < 0.08 &    # RMSEA 太小（0）或太大都不理想
SRMR < 0.08                 # SRMR 太大代表模型誤差大
)
results_clean$Item_Count <- sapply(strsplit(results_clean$Items, ","), length)
View(results_clean)  # 可用來看表格
write.csv(results_clean, "C:\\Users\\huann\\OneDrive\\Desktop\\Education Big Data\\results1_CFI90.csv", row.names = FALSE)
